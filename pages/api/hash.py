import hashlib
import subprocess

# Function to compute SHA-1 hash
def compute_sha1(data):
    #encode()=> convert the string data into a bytes-like object.
    #update()=> takes the encoded bytes and updates the SHA-1 hash object with these bytes
    #sha1.hexdigest() => hexadecimal representation
    sha1 = hashlib.sha1()
    sha1.update(data.encode())
    return sha1.hexdigest()

# Get the path of the current Git repository as string
git_repo_path = subprocess.check_output(['git', 'rev-parse', '--show-toplevel'], text=True).strip()

# Previous hash (retrieve from storage, e.g., a file or database)
#TODO: HOW TO KEEP AND RETRIEVE PREVIOUS HASH CODE 
previous_hash = ''

# Git diff command to get the changes

#stdout=subprocess.PIPE: By setting stdout=subprocess.PIPE, you're capturing the standard output 
# (stdout) of the external command and storing it in the stdout variable. This allows you to access
#  the output generated by the git diff command.

#stderr=subprocess.PIPE: Similarly, by setting stderr=subprocess.PIPE, you're capturing the standard error 
# (stderr) of the external command and storing it in the stderr variable. This is useful for capturing any error 
# messages or diagnostic information generated by the command.

#git_diff.communicate(): This line actually runs the external command (git diff HEAD). The communicate() 
# method starts the command, waits for it to complete, and returns a tuple containing the captured stdout and stderr.
#  In this case, the stdout variable will contain the standard output of the git diff command, and the stderr variable
#  will contain any error messages if there were errors.

git_diff = subprocess.Popen(['git', 'diff', 'HEAD'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
stdout, stderr = git_diff.communicate()

if git_diff.returncode == 0:
    # Compute SHA-1 hash of the changes
    current_hash = compute_sha1(stdout)

    print('Git Repository Path:', git_repo_path)
    print('Previous Hash:', previous_hash)
    print('Current Hash:', current_hash)

    if previous_hash == current_hash:
        print('No changes.')
    else:
        print('Changes detected.')
        # Save the new hash for future comparisons
        # (e.g., write to a file or store in a database)
else:
    print('Error running git diff.')



